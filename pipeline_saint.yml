project: 'saint'
datasets_file: 'datasets_saint.yml'
mount: narval
inspect:
  path : 
    computecanada: '/home/yorguin/scratch/%PROJECT%/inspect/'
    local: './data/%PROJECT%/inspect/'
    narval: '/home/yorguin/scratch/%PROJECT%/inspect/'
preprocess:
  prep_cfg:
    defaultprep: # This is the name of the preprocessing pipeline
      prepare:
        epoch_length : 5
        downsample : 200
        skip_prep : True
        skip_reject : True
        normalization : True
      overwrite : False
    prep10min: # This is the name of the preprocessing pipeline
      prepare:
        epoch_length : 600
        downsample : 200
        skip_prep : True
        skip_reject : True
        normalization : True
      overwrite : False

  prep_list :
    - defaultprep
    - prep10min

prep_inspection:
  path : 
    computecanada: '/home/yorguin/scratch/%PROJECT%/prep_inspection/'
    local: './data/%PROJECT%/prep_inspection/'
    narval: '/home/yorguin/scratch/%PROJECT%/prep_inspection/'
  overwrite : False
  checks:
    - 'epochs'
  prep_list :
    - defaultprep

features:
  feature_pipeline_cfg:
    features@prep-defaultprep: #you set the name of the feature pipeline with the key
      prep_pipeline : 'defaultprep' # This is the name of the preprocessing pipeline previously defined (must exist in derivatives)
      downsample : 200
      prefilter : null
      keep_channels : False
      feature_list: # To say which features actually compute rather than configure
        #- PowerSpectrum
        - PowerSpectrumAverage
        - RelativeBandPowerFromAverageSpectrum
        #- RelativeBandPower
        - FooofFromAverage
        - RelativeBandPowerFromAverageFooof
        - BandRatiosFromAverageSpectrum
        - BandRatiosFromAverageFooof
        #- detrendedFluctuation
        - lzivComplexity
        - sampleEntropy
        - spectralEntropy
        - appEntropy
        - hjorthParams
        - hjorthMobility
        - hjorthComplexity
        - numZerocross
        - permEntropy
        - svdEntropy
        - higuchiFd
        - katzFd
        - petrosianFd
        - entropyMultiscale
    features@prep-prep10min: #you set the name of the feature pipeline with the key
      prep_pipeline : prep10min # This is the name of the preprocessing pipeline previously defined (must exist in derivatives)
      downsample : 200
      prefilter : null
      keep_channels : False
      feature_list: # To say which features actually compute rather than configure
        - detrendedFluctuation

  feature_pipeline_list: #which feature pipelines to run
    - features@prep-prep10min
    - features@prep-defaultprep
  feature_cfg: # You can configure different features for the same function but different args
    # The suffix will be the higher hierarchy name you put here
    PowerSpectrum:
      overwrite : False
      chain: # Chain is a list of either dict of defined functions (outputs not saved) or dict of defined features (output saved)
      # input of chain is assumed to be mne epochs unless it first item is directly a feature
      - function : spectrum_multitaper
        args:
          multitaper:
            adaptive : False
            low_bias : True
            normalization : 'full'
            verbose : 0
    PowerSpectrumAverage:
      overwrite : False
      chain:
        - feature : PowerSpectrum
        - function: agg_numpy
          args:
            numpyfun: eval%np.mean
            max_numitem: 240 # 20min at 5sec per epoch
            axisname: 'epochs'
    FooofFromAverage:
      overwrite : False
      chain:
        - feature : PowerSpectrumAverage
        - function : fooof_from_average
          args :
            internal_kwargs:
              FOOOF:
                aperiodic_mode : knee
              fit:
                freq_range : [1,90]
    RelativeBandPowerFromAverageSpectrum:
      overwrite : False
      chain :
        - feature : PowerSpectrumAverage # this will save PowerSpectrum if not already saved
        - function: relative_bandpower
          args :
            bands:
              delta : [1,4]
              theta : [4,8]
              alpha : [8,13]
              beta  : [13,30]
              gamma : [30,90]
    RelativeBandPowerFromAverageFooof:
      overwrite : False
      chain:
        - feature : FooofFromAverage
        - function: relative_bandpower_from_fooof
          args :
            bands:
              delta : [1,4]
              theta : [4,8]
              alpha : [8,13]
              beta  : [13,30]
              gamma : [30,90]
    BandRatiosFromAverageSpectrum:
      overwrite : False
      chain:
        - feature : RelativeBandPowerFromAverageSpectrum
        - function: band_ratios
          args: {}
    BandRatiosFromAverageFooof:
      overwrite : False
      chain:
        - feature : RelativeBandPowerFromAverageFooof
        - function: band_ratios
          args: {}
    detrendedFluctuation:
      overwrite: False
      chain:
        - function: compute_detrendedFluctuation
          args:
            internal_kwargs:
              detrended_fluctuation : {}

    lzivComplexity:
      overwrite: False
      chain:
        - function: compute_lzivComplexity
          args:
            prefoo : "eval%lambda x: (x > np.median(x)).astype(int)"
            internal_kwargs:
              lziv_complexity :
                normalize: True

    sampleEntropy:
      overwrite: False
      chain:
        - function: compute_sampleEntropy
          args:
            internal_kwargs:
              sample_entropy :
                order : 2
                metric : chebyshev

    spectralEntropy:
      overwrite: False
      chain:
        - function: compute_spectralEntropy
          args:
            internal_kwargs:
              spectral_entropy :
                sf : eval%eeg.info['sfreq']
                method : 'welch'
                nperseg : eval%int(np.round(eeg.info['sfreq']/1))
                normalize : True
    appEntropy:
      overwrite: False
      chain:
        - function: compute_appEntropy
          args:
            internal_kwargs:
              app_entropy :
                order : 2
                metric : chebyshev
    hjorthParams:
      overwrite: False
      chain:
        - function: compute_hjorthParams
          args:
            internal_kwargs:
              hjorth_params: {}

    hjorthMobility:
      overwrite: False
      chain:
        - feature: hjorthParams
        - function: extract_item
          args:
            fun: "eval%lambda x: x[0]"
            newtype: hjorthMobility

    hjorthComplexity:
      overwrite: False
      chain:
        - feature: hjorthParams
        - function: extract_item
          args:
            fun: "eval%lambda x: x[1]"
            newtype: hjorthComplexity
    numZerocross:
      overwrite: False
      chain:
        - function: compute_numZerocross
          args:
            internal_kwargs:
              num_zerocross:
                normalize: True

    permEntropy:
      overwrite: False
      chain:
        - function: compute_permEntropy
          args:
            internal_kwargs:
              perm_entropy:
                order: 3
                delay: 1
                normalize: True

    svdEntropy:
      overwrite: False
      chain:
        - function: compute_svdEntropy
          args:
            internal_kwargs:
              svd_entropy:
                order: 3
                delay: 1
                normalize: True

    higuchiFd:
      overwrite: False
      chain:
        - function: compute_higuchiFd
          args:
            internal_kwargs:
              higuchi_fd:
                kmax: 10

    katzFd:
      overwrite: False
      chain:
        - function: compute_katzFd
          args:
            internal_kwargs:
              katz_fd: {}

    petrosianFd:
      overwrite: False
      chain:
        - function: compute_petrosianFd
          args:
            internal_kwargs:
              petrosian_fd: {}

    entropyMultiscale: #TODO: i think the aggregation wont work here because multiscale return a complex datatype, check this
      overwrite: False
      chain:
        - function: compute_entropyMultiscale
          args:
            internal_kwargs:
              entropy_multiscale:
                scale : "default"
                dimension : 3
                tolerance : "sd"
                method : "MSEn"
                show : False

    entropyMultiscaleSingle: #TODO: i think the aggregation wont work here because multiscale return a complex datatype, check this
      overwrite: False
      chain:
        - feature: entropyMultiscale
        - function: extract_item
          args:
            fun: "eval%lambda x: x[0]"
            newtype: null
aggregate:
  path : 
    computecanada: '/home/yorguin/scratch/%PROJECT%/aggregate/' #
    local: './data/%PROJECT%/aggregate'
  filename : 'aggregate'
  id_splitter : '/'
  feature_return:
    RelativeBandPower1: # Could be the original name or a post-processed name
      return_function : "eval%lambda x: x"
      file_suffix : RelativeBandPower1
    fooofSlope:
      return_function : "eval%lambda x: x.aperiodic_params_[0]"
      file_suffix : FooofFromAverage
    detrendedFluctuation: # no text
      return_function : "eval%lambda x: agg_numpy(x, np.mean, 2, 'epochs')" # this uses the first 2 epochs of the 10min epoch
      file_suffix : detrendedFluctuation
    lzivComplexity: # text
      return_function : "eval%lambda x: agg_numpy(x, np.mean, 240, 'epochs')"
      file_suffix : lzivComplexity
    sampleEntropy: # text
      return_function : "eval%lambda x: agg_numpy(x, np.mean, 240, 'epochs')"
      file_suffix : sampleEntropy
    spectralEntropy: # text
      return_function : "eval%lambda x: agg_numpy(x, np.mean, 240, 'epochs')"
      file_suffix : spectralEntropy
    appEntropy: # text
      return_function : "eval%lambda x: agg_numpy(x, np.mean, 240, 'epochs')"
      file_suffix : appEntropy
    hjorthMobility: # text
      return_function : "eval%lambda x: agg_numpy(x, np.mean, 240, 'epochs')"
      file_suffix : hjorthMobility
    hjorthComplexity: # text
      return_function : "eval%lambda x: agg_numpy(x, np.mean, 240, 'epochs')"
      file_suffix : hjorthComplexity
    numZerocross: # text
      return_function : "eval%lambda x: agg_numpy(x, np.mean, 240, 'epochs')"
      file_suffix : numZerocross
    permEntropy: # text
      return_function : "eval%lambda x: agg_numpy(x, np.mean, 240, 'epochs')"
      file_suffix : permEntropy
    svdEntropy  : # text
      return_function : "eval%lambda x: agg_numpy(x, np.mean, 240, 'epochs')"
      file_suffix : svdEntropy
    higuchiFd: # text
      return_function : "eval%lambda x: agg_numpy(x, np.mean, 240, 'epochs')"
      file_suffix : higuchiFd
    higuchiFdVar: # text
      return_function : "eval%lambda x: agg_numpy(x, np.var, 240, 'epochs')"
      file_suffix : higuchiFd
    katzFd: # text
      return_function : "eval%lambda x: agg_numpy(x, np.mean, 240, 'epochs')"
      file_suffix : katzFd
    katzFdSD: # text
      return_function : "eval%lambda x: agg_numpy(x, np.std, 240, 'epochs')"
      file_suffix : katzFd
    petrosianFd : # text
      return_function : "eval%lambda x: agg_numpy(x, np.mean, 240, 'epochs')"
      file_suffix : petrosianFd
    entropyMultiscale:
      return_function: "eval%lambda x: agg_numpy(x, np.mean, 240, 'epochs')"
      file_suffix : entropyMultiscaleSingle
    PowerSpectrumAverage:
      return_function: "eval%lambda x: x"
      file_suffix : PowerSpectrumAverage
  feature_aggregate_list:
    - FeaturesChannels@prep-defaultprep
  aggregate_cfgs:
    FeaturesChannels@prep-defaultprep:
      feature_folder : 'features@prep-defaultprep' # what if we have multiple feature folders?
      feature_list: # CHOOSE FEATURES WITH SAME DIMENSIONS, OTHERWISE THE DATAFRAME CANT BE MADE
        - RelativeBandPower1 # could be the original name or a post-processed name
        - fooofSlope
        - detrendedFluctuation
        - lzivComplexity
        #- sampleEntropy
        - spectralEntropy
        #- appEntropy
        - hjorthMobility
        - hjorthComplexity
        - numZerocross
        - permEntropy
        - svdEntropy
        - higuchiFd
        - katzFd
        - petrosianFd
        #- entropyMultiscale
        #- PowerSpectrumAverage

scalingAndFolding:
  aggregate_folders:
    - 'FeaturesChannels@prep-defaultprep'
  MAX_FEATURES: null
  path : 
    computecanada: '/home/yorguin/scratch/%PROJECT%/scalingAndFolding/'
    local: './data/%PROJECT%/scalingAndFolding'
  random_state : 0
  targets :
    - 'group'
  dropsToOnlyFeatures: # the targets will be appended to this in the script
    - age
    - dataset
    - group
    - id
    - sex
    - subject
    - task
  stratifiedvars :
    #- dataset
    - group #make it easier to balance for test purposes
    #- sex
  scalings : # dont use _ - in the name (bids-like)
    scalingStandard:
      method : 'StandardScaler'
    # we should implement a none scaling...
    noScaling:
      method: 'noScaling'
  splits : # dont use _ - in the name (bids-like)
    folding:
      method : 'StratifiedKFold'
      num_folds: 5 # stratified by combination by default
    trainTestSplit:
      method : 'train_test_split'
      test_ratio : 0.3
      stratify : True # Based on combination, see script for meaning...
    all :
      method : 'all'
  visualizations:
    PCAviz:
      method : 'PCA'
      n_components : 2
      color_by : dataset
      colormap : 'viridis'
  featurewiz:
    init:
      corr_limit : 0.75
      feature_engg : ''
      category_encoders : ''
      dask_xgboost_flag : False
      nrows : null # Dont use None here
      verbose : 0

ml:
  path: 
    computecanada: '/home/yorguin/scratch/%PROJECT%/ml/'
    local: './data/%PROJECT%/ml'
  featurewiz:
    init:
      corr_limit : 0.75
      feature_engg : ''
      category_encoders : ''
      dask_xgboost_flag : False
      nrows : null # Dont use None here
      verbose : 0
  models:
    automljar :
      skip: True
      method : AutoMLjar
      init :
        algorithms :
          - 'Baseline'
          - 'Linear'
          - 'Decision Tree'
          - 'Random Forest'
          - 'Extra Trees'
          - 'LightGBM'
          - 'Xgboost'
          - 'CatBoost'
          - 'Neural Network'
          - 'Nearest Neighbors'
        explain_level : 2
        ml_task : 'binary_classification'
        mode : Explain
        eval_metric : 'accuracy'
        validation_strategy : 
          validation_type : custom
        model_time_limit : 3600
        n_jobs : 10

    autogluon:
      method: AutoGluon
      skip: False
      init:
        problem_type: null
        eval_metric: null
        verbosity: 2
        log_to_file: True
        sample_weight: null
        groups: null
      fit :
        tuning_data : null
        time_limit : null
        presets : 'best_quality'
        hyperparameters : null
        feature_metadata : 'infer'
        infer_limit : null 
        infer_limit_batch_size : null
        fit_weighted_ensemble : True
        fit_full_last_level_weighted_ensemble : True
        full_weighted_ensemble_additionally  : False
        dynamic_stacking : False
        calibrate_decision_threshold : False
        num_cpus : 10
        num_gpus : auto
        num_bag_folds : 0

eda:
  path: 
    computecanada: '/home/yorguin/scratch/%PROJECT%/eda/'
    local: './data/%PROJECT%/eda'
  
  # ols
  category_vars:
    - dataset
    - sex
  desired_threshold: 0.05
  formula: "{feature} ~ C(group, Treatment(reference='HC')) + age + sex"

  # plot based on feature type (1st level)
  # define functions (or a map-dictionary)
  feature_categories:
      by_band :
        category_name : byband
        category_mapping: |
          def category_mapping(x):
            for b in ['pre_alpha','alpha','beta','gamma','delta','slow_theta','theta']:
                if b in x:
                    return b
            else:
                return 'NoBand'
        input_column_mapping : Feature
        color_map:
          pre_alpha : blue
          alpha : green
          beta : yellow
          gamma : orange
          delta : red
          slow_theta : magenta
          theta : brown
          NoBand : black
      by_ROI :
        category_name : band
        category_mapping: |
          def category_mapping(x):
            for b in ['pre_alpha','alpha','beta','gamma','delta','slow_theta','theta']:
                if b in x:
                    return b
            else:
                return 'NoBand'
        input_column_mapping : Feature
        color_map:
          pre_alpha : blue
          alpha : green
          beta : yellow
          gamma : orange
          delta : red
          slow_theta : magenta
          theta : brown
          NoBand : black
